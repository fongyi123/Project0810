// --------------------------------------------------
// 210 定義類別(一) -- class, new

"use strict";
class CAnimal {
    makeSound() {
        alert("Animal: ...");
    }
}
let obj = new CAnimal();
obj.makeSound();




// --------------------------------------------------
// 220 定義類別(二) -- private, property(get, set)

"use strict";
class CAnimal {
    constructor() {
        this._weight = 0;----A
        this.weight = 0;----B

    }
    get weight() {
        return this._weight;
    }
    set weight(weightValue) {
        if (weightValue > 0) {
            this._weight = weightValue;
        }
    }
    makeSound() {
        alert("Animal: ...");
    }
}
let obj = new CAnimal();
obj.weight = 100;
obj.weight = -3;
alert(obj.weight.toString());




// --------------------------------------------------
// 230 定義類別(三) -- constructor

"use strict";
class CAnimal {
    constructor(weightValue = 1) {
        this._weight = 0;
        this.weight = weightValue;
    }
    get weight() {
        return this._weight;
    }
    set weight(weightValue) {
        if (weightValue > 0) {
            this._weight = weightValue;
        }
    }
    makeSound() {
        alert("Animal: ...");
    }
}
// let obj = new CAnimal();
let obj = new CAnimal(3);
alert(obj.weight.toString());




// --------------------------------------------------
// 240 定義類別(四) -- extends, super

"use strict";
class CAnimal {
    constructor(weightValue = 1) {
        this._weight = 0;
        this.weight = weightValue;
    }
    get weight() {
        return this._weight;
    }
    set weight(weightValue) {
        if (weightValue > 0) {
            this._weight = weightValue;
        }
    }
    makeSound() {
        alert("Animal: ...");
    }
}
class CDog extends CAnimal {
    makeSound() {
        // super.makeSound();
        alert("Dog barking!");
    }
}
let obj = new CDog(3);
obj.makeSound();




// --------------------------------------------------
// 250 定義類別(五) -- extends, super()

"use strict";
class CAnimal {
    constructor(weightValue = 1) {
        this._weight = 0;
        this.weight = weightValue;
    }
    get weight() {
        return this._weight;
    }
    set weight(weightValue) {
        if (weightValue > 0) {
            this._weight = weightValue;
        }
    }
    makeSound() {
        alert("Animal: ...");
    }
}
class CDog extends CAnimal {
    constructor(location = "Earth", weightValue) {
        super(weightValue);
        this.location = location;
    }
    makeSound() {
        // super.makeSound();
        alert("Dog barking!");
    }
}
// let obj = new CDog(null, 3);
let obj = new CDog(undefined, 3);
alert(obj.weight);
alert(obj.location);





－－－－課堂老師寫法－－－－
<script>
    class CAnimal { makeSound(){
            alert("Animal:....");
        }
        move(distance){
            alert(distance)
        }
    }
    let obj = new CAnimal();
    obj.move(6);

    class Dog extends CAnimal{
        super.makeSound(){
            alert("Animal:Wog:Wong! Wong!);

        }
    }

    let obj = new Dog (3);
    alert(obj.weight);
    obj..makeSound();


    class Dog extends CAnimal{
        constructor (weightValue,locationName){
            super(property)Dog.location:any
            this.location = locationName;
        }
        makeSound(){
            super.makeSound();
            alert("Animal:Wog:Wong! Wong!);

        }
    }

    let obj = new Dog (3);
    alert(obj.weight);
    obj..makeSound();








</script>
